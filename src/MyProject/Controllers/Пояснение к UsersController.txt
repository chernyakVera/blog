/** Класс-конроллер дл работы с пользователями */

/* Задаем свойство класса $view */

public function __construct()

    /* Конструктор, в котором задаем значение свойства $view.
    Теперь это объект класса View, который принимает агрумент
    пути до шаблона. */



public function signUp()

    /* Метод для регистрации пользователей.
    Для начала проверяю, не пустые ли данные пришли. Если не пустые,
    то пишу конструцкцию try-catch, для обработки выскочивших исключений.
     В try создаю переменную $user содержащую в себе массив
    (из глобальной переменной $_POST),который передаю на обработку
    в одноименный СТАТИЧЕСКИЙ метод signUp (описанный в классе User).
    !!! Сначала я проверяю данные на пустоту, только потом запускается
     блок try-catch. Т.е. может данные пришли и не все, но такой массив уже
    не назовешь пустым. И далее, в статическом методе User::signUp проверяется,
    ВСЕ ЛИ данные пришли, т.к. там могла быть заполнена одна строка, и уже массив
    не пустой, но данные же не все...  !!!
    А если пришли пустые данные из глобальной переменной $_POST,
    то вызываю свойство view у пришедшего объекта $this, и далее из view
    вызываю метод класса View renderHtml() и передаю как аргумент имя шаблона.
    В итоге тут получаю страничку с пустыми полями nickname, email, пароль, чтобы
    пользователь все-таки их ввел и я могла их обработать/проверить и передать
    дальше */

    /* Обязательно пишу return, чтобы прервать дальнейшее выполнение кода,
     иначе получаю 2 странички друг под другом.*/





public function activate(int $userId, string $activateCode)
/** Метод (вызванный через маршрутизатор routes.php),
     * принимающий в качестве аргументов id (переданный в адресной строке) и
     * $activate Code (также переданный в адресной строке).
     */



        /* Тут с помощью статического метода getById класса User(от ActiveRecordEntity)
        и задавая id пользователя, получаю строку(массив) из БД (из таблицы `users`) */



        /* Тут ответом будет bool True или вернется новый массив (если такой
        пользователь с таким кодом активации уже существует) , для этого вызываю
        статический метод checkActivationCode для проверки на совпадение
         с существующим кодом активации записанным у проверяемого пользователя */


	/* Если ранее выданное значение True, значит такого пользователя
        еще не было в БД и его надо туда занести (этим займется вызываемый
        далее метод класса User activate()). */





public function login()
/* Метод, обрабатывающий выскочившие ошибки, а в случае отсутствия ошибок -
     пойду создавать токены для куки и проверять пришедшие куки в методе
    createToken().
    Также ошибок может не быть, если были переданы пустые данные и , чтобы
    пользователь все-таки заполнил поля правильно снова вызываем страницу авторизации. */










