/** Класс для обработки статьи (будет отдельная страница со статьей) */

public function view(int $articleId)
        /** Получаю в переменную $article одну строку по id
         * (как можно видеть статический метод getById используется классом Article)
         */



        /** Oбрабатываем ошибку, если вдруг была запрошена статья, id которой не существует.
         * Просто выбрасываем исключение класса NotFoundException,
         * которое будет словлено в фронт-контроллере index.php
         * и красиво обработано.
        */


        /** Указываем, что надо создать страничку со статьей с помощью
         * метода renderHtml класса View, где передаем имя шаблона странички
         *  и наполнение странички - строка из таблицы `articles` (в виде
         * массива в переменной $article) согласно запрошенному в адресной
         * строке id статьи.
         * В данный момент просто передаем кучу из 1го массива на View, а
         * он там сам будет красиво это раскладывать, что ему вообще
         * из этой кучи надо.
         */



public function edit(int $articleId): void
/**Метод редактирования(edit - 'редактировать') таблицы в БД,
     * сначала получаем строку по id (в виде массива) из таблицы `articles` из БД.
     */


	/* Если текущий пользователь, который хочет отредактировать статью,
        не авторизован, выбрасываем исключение. */


        /* Если пришли не пустые данные редактирования статьи, то
        сначала пытаемся их закинуть в метод updateFromArray(),
        чтобы далее уже обновить статью в БД.
        Если метод updateFromArray() не отработал, т.к. выбросил исключение,
        то показываем пользователю страничку редактирования статьи, но
        с описанием ошибки. Пишем return, чтоб дальнейший код не начал выполнение,
        т.к. при наличии выскочившей ошибки он неактуален.
        Если ошибки не выскочили, то от блока try прееходим сразу к header(),
        где указываем перенаправление со страницы редактирования на страницу
        просмотра свежеотредактированной статьи по ее id. Пишем exit(),
        чтобы дальнейший код не выполнился, иначе будет 2 странички, одна под
        одной.
        Ну а если все-таки пришли пустые данные, то просто снова отправляем
        пользователя на страничку редактирования статьи. */





public function add(): void
  /** Метод для выведения шаблона странички для добаления новых статей,
     * если пользователь авторизован, т.к. он в последствии будет обозначен
     * как автор статьи, а если он не авторизован, то неоткуда брать автора и
     * получится статья без автора.
     */
     * Все начинается в index.php - там подключается файл-маршрутизатор
     * routes.php, где расписаны паттерны и соответствующие методы,
     * куда надо далее перенаправлять запрос из адресной строки, если
     * есть совпадение с одним из паттернов. Иначе index.php напишет
     * 'Страница не найдена!'.
     * И т.к. было совпадение по ранее прописанному паттерну
     * '~^articles/add$~' в routes.php, то нас это привело к методу
     * add().
     

        /* Проверяем, аторизован ли пользователь, который зашел на страницу,
        чтобы создать новую статью. Если нет - кидаем исключение,
        если он авторизован, то загружаем страницу для создания статей.  */


        /* Если пришли не пустые данные, то отправляем их в метод createFromArray(),
        где они станут оформленной статьей и она отправится в БД.
        Если выскакивает ошибка (т.е. метод createFromArray() не отработал,
        т.к. были переданы некорректные данные), то снова вызываем старничку для
        добавления статей, но уже с сообщением об ошибке.
        Далее отправляем на сайт заголовок header, где указано перенаправление
        при успешном создании статьи, на саму эту успешную статью.
        И т.к. нам не нужна еще одна страница, то пишем exit(), что не позволит
        коду, расположенному ниже, начаться (типа return). */


       






