/** Класс, который отражает таблицу `users` из БД
 и наследуется от абстрактного класса ActiveRecordEntity */



protected static function getTableName(): string
/** Описываю обязательный метод getTableName(), т.к. наследуемся от
     абстрактного класса ActiveRecordEntity */



public function getEmail(): string
/** Т.к. свойство $email идет с модификатором доступа protected,
     * то для получения информации из него нужен геттер.
     */






public static function signUp(array $userData): User
/* Статический метод (т.е. метод, при вызове которого не надо
    создавать объект класса, где данный метод описан), который принимает
    массив из класса UsersController из глобальной переменной $_POST.
    Далее проверяет на пустоту. Если данные пришли пустыми, то кидает исключение. */

	/* Проверка на корректность логина nickname.
        Мы хотим чтобы он состоял только из букв латинского алфавита и цифр,
        могло бы подойти '\w', но оно содержит нижнее подчеркивание :(.
        Если такое совпадение с регулярным выражением не было найдено,
        выбрасывается исключение. */

	/* Проверка на корректность email с помощью функ. filter_var(),
        у которой есть фильтр FILTER_VALIDATE_EMAIL, благодаря чему можно
        не придумывать регулярки :).
        И если проверка не пройдена, т.е. вернулся False,
        то выбрасывается исключение. */

	/* Проверка пароля на длину с помощью функ. mb_strlen(). */

	/* Когда все проверки пройдены и данные исправлены,
         можем создать ноого пользователя (похоже на задание
         данных как в конструкторе или сеттере)*/

	/* Сохраняем нового пользователя в БД. */


	/* Результат настоящего метода - это новый пользователь в
        таблице users БД. */



public function activate(): void
/* Метод, (вызывамый в UsersController в одноименном методе activate($id, $code)),
     который работает как сеттер - раз уж до него добрались данные, значит
    такого пользователя еще нет в БД и его надо туда занести (этим займется
    метод save()), + изменим значение в столбце на true (хотя это сейчас
    не столбец таблицы `users`, а только свойство класса User...)*/






public static function login(array $loginData): User
/** Статический метод, проверяющий пришедшие данные на ошибки и пустоту */


	/* Сверка переданного пароля и хэша пароля, сохраненного при регистрации.
        Функ. password_verify - встроенная функ. PHP. */


	/* Обновление $authToken в таблице БД при каждом входе на сайт. */






public function getPasswordHash(): string
/** Метод геттер для свойства $passwordHash класса User,
     * которое явл. столбцом password_Hash таблицы `users` БД.
     */





private function refreshAuthToken()
/** Метод сеттер для свойства $authToken.
     * Функ. sha1 - это функ., кот. возвращает хэш-строку, вычисленную
     * по алгоритму Secure Hash Algorithm 1.
     */


























