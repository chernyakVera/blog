/** Класс Singleton - паттерн проектирования, согласно которому
 * можно создать только один экземпляр класса.
 */


private function __construct()

        /**запрашиваем файл settings.php
         * с настройками входа в базу данных в массиве 'db'
         и складываем в переменную $dbOptions */


        /**PDO - существующий класс для безопасной работы с базой данных,
         *  далее просто вводим нужные нам значения для конструктора PDO
         */
        /**склеиваем dsn (data sourse name),
         *  https://www.php.net/manual/ru/pdo.construct.php,
         * но не знаю, откуда мы знаем, что писать (какой host)?
         */


    /* Конструкцией try-catch() обрабатываем исключения, которые бросает
    класс PDOException*/

        /**используем метод exec класса PDO (пока не понимаю зачем, он же бестолковый),
         * этот метод запускает SQL-запрос на выполнение и возвращает количество срок,
         * задействованных в ходе его выполнения или false.
         * (Не работает с запросом SELECT)
         */

        /* Если исключение все-таки было брошено PDOExceptions, то конструкция
        catch его ловит, бросает свое исключение (новый объект класса Exception),
         и выводит уже свое сообщение об ошибке и спрашивает у своего исключения
        в чем же дело, используя метод getMessage() класса Exception.*/




public function query(string $sql, $params = [], string $className = 'stdClass'): ?array
/**метод для работы с запросами из БД, который принимает строку sql запроса,
     * параметры (но если не указывать, будет просто пустой массив) и имя класса, 
     * объекты которого нужно создавать (по-умолчанию поставили stdClass –
     * это такой встроенный класс в PHP, у которого нет никаких свойств и методов.).
     * (символ ?array означает, что может вернуться либо массив, либо null ) 
     */


        /**вызываем метод prepare класса PDO, экземпляром которого является переменная $pdo.
         * Вызываемый метод подготавливает запрос к выполнению и возвращает связанный с этим
	 запросом объект - это уже экземпляр класса PDOStatement - (или false).
         */


        /**т.к. переменная $sth явл. экземпляром класса PDOStatement,
         * то могу вызвать у этой переменной метод execute(), который в свою очередь запускает подготовленный
         * запрос на выполнение (https://www.php.net/manual/ru/pdostatement.execute.php),
         * возвращает true/false.
         */


        /**теперь вызываем метод fetchall (мод $mode = PDO::FETCH_CLASS ) класса PDOStatement,
         * (PDO::FETCH_CLASS: Будет создан и возвращён новый объект указанного класса (2й аргумент метода fetchAll). 
         * Свойствам объекта будут присвоены значения столбцов, имена которых совпадут с именами свойств)..
         */






public static function getInstance(): self
/** метод, благодаря которому и осуществляется принцип класса Singleton -
     * если количество экземпляров класса равно null, то создаем экземпляр класса
     * и возвращаем его. Если количество экземляров класса не null (т.е. от 1 и больше),
     * то просто возвращаем созданный ранее экземпляр.
     * Т.о. будет использоваться только один экземпляр класса.
     */





public function getLastInsertId(): int
/** Метод, который возвращает номер последнего добавленного id.
     * Вызываем свойство класса Db pdo, которое явл. объектом
     * встроенного в PHP класса PDO для работы с БД.
     * Далее вызываем у объекта класса PDO метод lastInsertId() и
     * ничего в него не передаем, чтоб он вернул нам номер последнего
     * добавленного id.
     */



















